def pattern(offset)
  pattern =  [0] * offset +
             [1] * offset +
             [0] * offset +
            [-1] * offset

  pattern = pattern.cycle
  pattern.next
  pattern
end

input = "59773419794631560412886746550049210714854107066028081032096591759575145680294995770741204955183395640103527371801225795364363411455113236683168088750631442993123053909358252440339859092431844641600092736006758954422097244486920945182483159023820538645717611051770509314159895220529097322723261391627686997403783043710213655074108451646685558064317469095295303320622883691266307865809481566214524686422834824930414730886697237161697731339757655485312568793531202988525963494119232351266908405705634244498096660057021101738706453735025060225814133166491989584616948876879383198021336484629381888934600383957019607807995278899293254143523702000576897358"
offset = input[0, 7]

phases = 100

output = phases.times.map {
  input = input.chars.map.with_index { |digit, i|
    pattern = pattern(i + 1)
    (input.chars.inject(0) { |a, b| a + b.to_i * pattern.next }.abs % 10).to_s
  }.join('')
}

p output.last[0,8]
